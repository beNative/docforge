import type { Command, Settings } from '../../types';

export interface MonacoKeybindingDefinition {
  id: string;
  name: string;
  description: string;
  category: string;
  defaultShortcut: string[];
  monacoCommandId: string;
  keywords?: string;
}

export const MONACO_KEYBINDING_DEFINITIONS: MonacoKeybindingDefinition[] = [
  {
    id: 'monaco.toggleLineComment',
    name: 'Toggle Line Comment',
    description: 'Add or remove line comments for the current selection.',
    category: 'Basic Editing',
    defaultShortcut: ['Control', '/'],
    monacoCommandId: 'editor.action.commentLine',
    keywords: 'comment code',
  },
  {
    id: 'monaco.toggleBlockComment',
    name: 'Toggle Block Comment',
    description: 'Wrap the current selection with block comment markers.',
    category: 'Basic Editing',
    defaultShortcut: ['Shift', 'Alt', 'A'],
    monacoCommandId: 'editor.action.blockComment',
    keywords: 'comment block',
  },
  {
    id: 'monaco.insertLineBelow',
    name: 'Insert Line Below',
    description: 'Insert a new line below the current line.',
    category: 'Basic Editing',
    defaultShortcut: ['Control', 'Enter'],
    monacoCommandId: 'editor.action.insertLineAfter',
    keywords: 'newline below',
  },
  {
    id: 'monaco.insertLineAbove',
    name: 'Insert Line Above',
    description: 'Insert a new line above the current line.',
    category: 'Basic Editing',
    defaultShortcut: ['Control', 'Shift', 'Enter'],
    monacoCommandId: 'editor.action.insertLineBefore',
    keywords: 'newline above',
  },
  {
    id: 'monaco.joinLines',
    name: 'Join Lines',
    description: 'Join the current line with the next line.',
    category: 'Basic Editing',
    defaultShortcut: ['Control', 'J'],
    monacoCommandId: 'editor.action.joinLines',
    keywords: 'merge lines',
  },
  {
    id: 'monaco.moveLineUp',
    name: 'Move Line Up',
    description: 'Move the current line or selection one line up.',
    category: 'Line Operations',
    defaultShortcut: ['Alt', 'ArrowUp'],
    monacoCommandId: 'editor.action.moveLinesUpAction',
    keywords: 'line up',
  },
  {
    id: 'monaco.moveLineDown',
    name: 'Move Line Down',
    description: 'Move the current line or selection one line down.',
    category: 'Line Operations',
    defaultShortcut: ['Alt', 'ArrowDown'],
    monacoCommandId: 'editor.action.moveLinesDownAction',
    keywords: 'line down',
  },
  {
    id: 'monaco.copyLineUp',
    name: 'Copy Line Up',
    description: 'Duplicate the current line or selection above.',
    category: 'Line Operations',
    defaultShortcut: ['Shift', 'Alt', 'ArrowUp'],
    monacoCommandId: 'editor.action.copyLinesUpAction',
    keywords: 'duplicate up',
  },
  {
    id: 'monaco.copyLineDown',
    name: 'Copy Line Down',
    description: 'Duplicate the current line or selection below.',
    category: 'Line Operations',
    defaultShortcut: ['Shift', 'Alt', 'ArrowDown'],
    monacoCommandId: 'editor.action.copyLinesDownAction',
    keywords: 'duplicate down',
  },
  {
    id: 'monaco.deleteLine',
    name: 'Delete Line',
    description: 'Delete the current line.',
    category: 'Line Operations',
    defaultShortcut: ['Control', 'Shift', 'K'],
    monacoCommandId: 'editor.action.deleteLines',
    keywords: 'remove line',
  },
  {
    id: 'monaco.indentLine',
    name: 'Indent Line',
    description: 'Indent the current line or selection.',
    category: 'Line Operations',
    defaultShortcut: ['Control', ']'],
    monacoCommandId: 'editor.action.indentLines',
    keywords: 'indent increase',
  },
  {
    id: 'monaco.outdentLine',
    name: 'Outdent Line',
    description: 'Outdent the current line or selection.',
    category: 'Line Operations',
    defaultShortcut: ['Control', '['],
    monacoCommandId: 'editor.action.outdentLines',
    keywords: 'indent decrease',
  },
  {
    id: 'monaco.cursorAbove',
    name: 'Add Cursor Above',
    description: 'Add an additional cursor above the current cursor.',
    category: 'Multi-Cursor',
    defaultShortcut: ['Control', 'Alt', 'ArrowUp'],
    monacoCommandId: 'editor.action.insertCursorAbove',
    keywords: 'multi cursor',
  },
  {
    id: 'monaco.cursorBelow',
    name: 'Add Cursor Below',
    description: 'Add an additional cursor below the current cursor.',
    category: 'Multi-Cursor',
    defaultShortcut: ['Control', 'Alt', 'ArrowDown'],
    monacoCommandId: 'editor.action.insertCursorBelow',
    keywords: 'multi cursor',
  },
  {
    id: 'monaco.addSelectionNextMatch',
    name: 'Add Next Occurrence',
    description: 'Add the next occurrence of the current selection.',
    category: 'Multi-Cursor',
    defaultShortcut: ['Control', 'D'],
    monacoCommandId: 'editor.action.addSelectionToNextFindMatch',
    keywords: 'multi cursor next',
  },
  {
    id: 'monaco.selectHighlights',
    name: 'Select All Occurrences',
    description: 'Select all occurrences of the current selection.',
    category: 'Multi-Cursor',
    defaultShortcut: ['Control', 'Shift', 'L'],
    monacoCommandId: 'editor.action.selectHighlights',
    keywords: 'multi cursor all',
  },
  {
    id: 'monaco.selectLine',
    name: 'Select Current Line',
    description: 'Select the entire current line.',
    category: 'Selection',
    defaultShortcut: ['Control', 'L'],
    monacoCommandId: 'expandLineSelection',
    keywords: 'select line',
  },
  {
    id: 'monaco.expandSelection',
    name: 'Expand Selection',
    description: 'Grow the current selection to the next syntactic boundary.',
    category: 'Selection',
    defaultShortcut: ['Shift', 'Alt', 'ArrowRight'],
    monacoCommandId: 'editor.action.smartSelect.grow',
    keywords: 'selection grow',
  },
  {
    id: 'monaco.shrinkSelection',
    name: 'Shrink Selection',
    description: 'Shrink the current selection to the previous syntactic boundary.',
    category: 'Selection',
    defaultShortcut: ['Shift', 'Alt', 'ArrowLeft'],
    monacoCommandId: 'editor.action.smartSelect.shrink',
    keywords: 'selection shrink',
  },
  {
    id: 'monaco.triggerSuggest',
    name: 'Trigger Suggest',
    description: 'Show code completion suggestions.',
    category: 'Code Actions',
    defaultShortcut: ['Control', 'Space'],
    monacoCommandId: 'editor.action.triggerSuggest',
    keywords: 'autocomplete intellisense',
  },
  {
    id: 'monaco.quickFix',
    name: 'Quick Fix...',
    description: 'Apply the best available fix for the current issue.',
    category: 'Code Actions',
    defaultShortcut: ['Control', '.'],
    monacoCommandId: 'editor.action.quickFix',
    keywords: 'lightbulb action',
  },
  {
    id: 'monaco.refactor',
    name: 'Refactor...',
    description: 'Show available refactoring actions.',
    category: 'Code Actions',
    defaultShortcut: ['Control', 'Shift', 'R'],
    monacoCommandId: 'editor.action.refactor',
    keywords: 'refactor code action',
  },
  {
    id: 'monaco.renameSymbol',
    name: 'Rename Symbol',
    description: 'Rename the symbol under the cursor.',
    category: 'Code Actions',
    defaultShortcut: ['F2'],
    monacoCommandId: 'editor.action.rename',
    keywords: 'rename identifier',
  },
  {
    id: 'monaco.triggerParameterHints',
    name: 'Trigger Parameter Hints',
    description: 'Show function parameter documentation.',
    category: 'Code Actions',
    defaultShortcut: ['Control', 'Shift', 'Space'],
    monacoCommandId: 'editor.action.triggerParameterHints',
    keywords: 'signature help',
  },
  {
    id: 'monaco.goToDefinition',
    name: 'Go to Definition',
    description: 'Jump to the definition of the symbol under the cursor.',
    category: 'Navigation',
    defaultShortcut: ['F12'],
    monacoCommandId: 'editor.action.goToDeclaration',
    keywords: 'navigate definition',
  },
  {
    id: 'monaco.peekDefinition',
    name: 'Peek Definition',
    description: 'Open the definition in a peek editor.',
    category: 'Navigation',
    defaultShortcut: ['Alt', 'F12'],
    monacoCommandId: 'editor.action.peekDeclaration',
    keywords: 'peek definition',
  },
  {
    id: 'monaco.goToImplementation',
    name: 'Go to Implementation',
    description: 'Jump to the implementation of the current symbol.',
    category: 'Navigation',
    defaultShortcut: ['Control', 'F12'],
    monacoCommandId: 'editor.action.goToImplementation',
    keywords: 'navigate implementation',
  },
  {
    id: 'monaco.goToReferences',
    name: 'Find References',
    description: 'List all references to the current symbol.',
    category: 'Navigation',
    defaultShortcut: ['Shift', 'F12'],
    monacoCommandId: 'editor.action.referenceSearch.trigger',
    keywords: 'references usages',
  },
  {
    id: 'monaco.goToLine',
    name: 'Go to Line...',
    description: 'Quickly jump to a specific line number.',
    category: 'Navigation',
    defaultShortcut: ['Control', 'G'],
    monacoCommandId: 'editor.action.gotoLine',
    keywords: 'navigate line',
  },
  {
    id: 'monaco.goToSymbol',
    name: 'Go to Symbol...',
    description: 'List and jump to symbols in the current file.',
    category: 'Navigation',
    defaultShortcut: ['Control', 'Shift', 'O'],
    monacoCommandId: 'editor.action.gotoSymbol',
    keywords: 'outline symbol',
  },
  {
    id: 'monaco.jumpToBracket',
    name: 'Jump to Bracket',
    description: 'Move the cursor to the matching bracket.',
    category: 'Navigation',
    defaultShortcut: ['Control', 'Shift', '\'],
    monacoCommandId: 'editor.action.jumpToBracket',
    keywords: 'bracket pair',
  },
  {
    id: 'monaco.find',
    name: 'Find',
    description: 'Open the find widget to search within the document.',
    category: 'Search',
    defaultShortcut: ['Control', 'F'],
    monacoCommandId: 'actions.find',
    keywords: 'search find',
  },
  {
    id: 'monaco.findNext',
    name: 'Find Next',
    description: 'Jump to the next match of the current search.',
    category: 'Search',
    defaultShortcut: ['F3'],
    monacoCommandId: 'editor.action.nextMatchFindAction',
    keywords: 'search next',
  },
  {
    id: 'monaco.findPrevious',
    name: 'Find Previous',
    description: 'Jump to the previous match of the current search.',
    category: 'Search',
    defaultShortcut: ['Shift', 'F3'],
    monacoCommandId: 'editor.action.previousMatchFindAction',
    keywords: 'search previous',
  },
  {
    id: 'monaco.replace',
    name: 'Replace',
    description: 'Open the replace widget to modify matches.',
    category: 'Search',
    defaultShortcut: ['Control', 'H'],
    monacoCommandId: 'editor.action.startFindReplaceAction',
    keywords: 'search replace',
  },
  {
    id: 'monaco.fold',
    name: 'Fold Region',
    description: 'Fold the current code region.',
    category: 'Folding',
    defaultShortcut: ['Control', 'Shift', '['],
    monacoCommandId: 'editor.fold',
    keywords: 'collapse fold',
  },
  {
    id: 'monaco.unfold',
    name: 'Unfold Region',
    description: 'Unfold the current code region.',
    category: 'Folding',
    defaultShortcut: ['Control', 'Shift', ']'],
    monacoCommandId: 'editor.unfold',
    keywords: 'expand fold',
  },
  {
    id: 'monaco.toggleWordWrap',
    name: 'Toggle Word Wrap',
    description: 'Switch between wrapped and unwrapped long lines.',
    category: 'View',
    defaultShortcut: ['Alt', 'Z'],
    monacoCommandId: 'editor.action.toggleWordWrap',
    keywords: 'wrap view',
  },
  {
    id: 'monaco.formatDocument',
    name: 'Format Document (Editor)',
    description: 'Format the entire document from within the editor.',
    category: 'Formatting',
    defaultShortcut: ['Shift', 'Alt', 'F'],
    monacoCommandId: 'editor.action.formatDocument',
    keywords: 'format beautify',
  },
];

export const resolveMonacoShortcut = (settings: Settings, definition: MonacoKeybindingDefinition): string[] => {
  const custom = settings.customShortcuts[definition.id];
  return custom && custom.length > 0 ? custom : definition.defaultShortcut;
};

export const getMonacoDefinition = (id: string): MonacoKeybindingDefinition | undefined => {
  return MONACO_KEYBINDING_DEFINITIONS.find(definition => definition.id === id);
};

export const createMonacoCommands = (): Command[] => {
  return MONACO_KEYBINDING_DEFINITIONS.map(definition => ({
    id: definition.id,
    name: definition.name,
    keywords: [definition.keywords, definition.description].filter(Boolean).join(' '),
    action: () => {},
    category: definition.category,
    icon: () => null,
    shortcut: definition.defaultShortcut,
    monacoCommandId: definition.monacoCommandId,
  }));
};

