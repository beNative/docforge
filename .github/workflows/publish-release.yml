name: Publish Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  create_release:
    runs-on: ubuntu-latest
    env:
      TAG_NAME: ${{ github.ref_name }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build release notes
        id: notes
        run: |
          awk '
            /^## / {
              if (found) exit
              found = 1
            }
            found { print }
          ' VERSION_LOG.md > release-notes.md
          if [ ! -s release-notes.md ]; then
            echo "Failed to extract release notes" >&2
            exit 1
          fi
          echo "Release notes:" >&2
          cat release-notes.md >&2

      - name: Create GitHub release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          if gh release view "$TAG_NAME" >/dev/null 2>&1; then
            gh release delete "$TAG_NAME" -y
          fi
          gh release create "$TAG_NAME" \
            --title "DocForge $TAG_NAME" \
            --notes-file release-notes.md

  package:
    needs: create_release
    name: ${{ matrix.display_name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - display_name: "macOS x64"
            os: macos-latest
            script: "package:mac:x64"
            arch: x64
            npm_platform: darwin
            cache_paths: |
              ~/Library/Caches/electron
              ~/Library/Caches/electron-builder
          - display_name: "Windows x64"
            os: windows-latest
            script: "package:win:x64"
            arch: x64
            npm_platform: win32
            cache_paths: |
              ~/AppData/Local/electron/Cache
              ~/AppData/Local/electron-builder/Cache
          - display_name: "Windows ia32"
            os: windows-latest
            script: "package:win:ia32"
            arch: ia32
            npm_platform: win32
            cache_paths: |
              ~/AppData/Local/electron/Cache
              ~/AppData/Local/electron-builder/Cache
          - display_name: "Linux x64"
            os: ubuntu-latest
            script: "package:linux:x64"
            arch: x64
            npm_platform: linux
            cache_paths: |
              ~/.cache/electron
              ~/.cache/electron-builder
          - display_name: "Linux armv7l"
            os: ubuntu-latest
            script: "package:linux:armv7l"
            arch: armv7l
            npm_platform: linux
            cache_paths: |
              ~/.cache/electron
              ~/.cache/electron-builder
          - display_name: "Linux arm64"
            os: ubuntu-latest
            script: "package:linux:arm64"
            arch: arm64
            npm_platform: linux
            cache_paths: |
              ~/.cache/electron
              ~/.cache/electron-builder
    defaults:
      run:
        shell: bash
    env:
      NODE_OPTIONS: --max_old_space_size=4096
      TAG_NAME: ${{ github.ref_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Cache Electron downloads
        uses: actions/cache@v4
        with:
          path: ${{ matrix.cache_paths }}
          key: ${{ runner.os }}-electron-${{ matrix.arch }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-electron-${{ matrix.arch }}-
            ${{ runner.os }}-electron-

      - name: Install system dependencies (Linux)
        if: ${{ runner.os == 'Linux' }}
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends -y rpm libarchive-tools
          if ! sudo apt-get install --no-install-recommends -y libfuse2; then
            sudo apt-get install --no-install-recommends -y libfuse2t64
          fi

      - name: Install dependencies
        run: npm ci
        env:
          npm_config_arch: ${{ matrix.arch }}
          npm_config_target_arch: ${{ matrix.arch }}
          npm_config_platform: ${{ matrix.npm_platform }}

      - name: Prepare native modules
        run: npm run postinstall --if-present
        env:
          npm_config_arch: ${{ matrix.arch }}
          npm_config_target_arch: ${{ matrix.arch }}
          npm_config_platform: ${{ matrix.npm_platform }}

      - name: Package application
        run: npm run ${{ matrix.script }}
        env:
          npm_config_arch: ${{ matrix.arch }}
          npm_config_target_arch: ${{ matrix.arch }}
          npm_config_platform: ${{ matrix.npm_platform }}

      # Upload only installer files and updater manifests (no unpacked trees)
      - name: Upload release assets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          shopt -s nullglob

          # Collect files; keep it simple to avoid YAML parsing issues
          FILES=()
          for f in \
            release/*.exe \
            release/*.exe.blockmap \
            release/*.dmg \
            release/*.dmg.blockmap \
            release/*.AppImage \
            release/*.deb \
            release/latest*.yml
          do
            [ -e "$f" ] && FILES+=("$f")
          done

          if [ ${#FILES[@]} -eq 0 ]; then
            echo "No release files found" >&2
            exit 1
          fi

          for file in "${FILES[@]}"; do
            echo "Uploading $(basename "$file")"
            gh release upload "$TAG_NAME" "$file" --clobber
          done

      - name: Upload build logs on failure
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.display_name }}-logs
          path: |
            npm-debug.log
            *.log
            release/**/*.log
          if-no-files-found: ignore
          retention-days: 7
