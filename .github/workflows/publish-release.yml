name: Publish Release

on:
  push:
    tags:
      - 'v*'   # e.g. v0.25.5

permissions:
  contents: write   # needed to create releases & upload assets

jobs:
  # 1) Build & package on each platform, then upload artifacts
  build:
    name: ${{ matrix.display_name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - display_name: "macOS x64"
            os: macos-latest
            script: "package:mac:x64"
            arch: x64
            npm_platform: darwin
            cache_paths: |
              ~/Library/Caches/electron
              ~/Library/Caches/electron-builder
          - display_name: "Windows x64"
            os: windows-latest
            script: "package:win:x64"
            arch: x64
            npm_platform: win32
            cache_paths: |
              ~/AppData/Local/electron/Cache
              ~/AppData/Local/electron-builder/Cache
          - display_name: "Windows ia32"
            os: windows-latest
            script: "package:win:ia32"
            arch: ia32
            npm_platform: win32
            cache_paths: |
              ~/AppData/Local/electron/Cache
              ~/AppData/Local/electron-builder/Cache
          - display_name: "Linux x64"
            os: ubuntu-latest
            script: "package:linux:x64"
            arch: x64
            npm_platform: linux
            cache_paths: |
              ~/.cache/electron
              ~/.cache/electron-builder
          - display_name: "Linux armv7l"
            os: ubuntu-latest
            script: "package:linux:armv7l"
            arch: armv7l
            npm_platform: linux
            cache_paths: |
              ~/.cache/electron
              ~/.cache/electron-builder
          - display_name: "Linux arm64"
            os: ubuntu-latest
            script: "package:linux:arm64"
            arch: arm64
            npm_platform: linux
            cache_paths: |
              ~/.cache/electron
              ~/.cache/electron-builder

    env:
      NODE_OPTIONS: --max_old_space_size=4096
      TAG_NAME: ${{ github.ref_name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Cache Electron downloads
        uses: actions/cache@v4
        with:
          path: ${{ matrix.cache_paths }}
          key: ${{ runner.os }}-electron-${{ matrix.arch }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-electron-${{ matrix.arch }}-
            ${{ runner.os }}-electron-

      - name: Install system deps (Linux)
        if: ${{ runner.os == 'Linux' }}
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends -y rpm libarchive-tools
          if ! sudo apt-get install --no-install-recommends -y libfuse2; then
            sudo apt-get install --no-install-recommends -y libfuse2t64
          fi

      - name: Install dependencies
        run: npm ci
        env:
          npm_config_arch: ${{ matrix.arch }}
          npm_config_target_arch: ${{ matrix.arch }}
          npm_config_platform: ${{ matrix.npm_platform }}

      - name: Prepare native modules
        run: npm run postinstall --if-present
        env:
          npm_config_arch: ${{ matrix.arch }}
          npm_config_target_arch: ${{ matrix.arch }}
          npm_config_platform: ${{ matrix.npm_platform }}

      - name: Package application
        run: npm run ${{ matrix.script }}
        env:
          npm_config_arch: ${{ matrix.arch }}
          npm_config_target_arch: ${{ matrix.arch }}
          npm_config_platform: ${{ matrix.npm_platform }}

      # Only upload installers + updater manifests (keep releases clean)
      - name: Upload packaged artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.display_name }}-artifacts
          if-no-files-found: error
          path: |
            release/*.exe
            release/*.exe.blockmap
            release/*.dmg
            release/*.dmg.blockmap
            release/*.AppImage
            release/*.deb
            release/latest*.yml

  # 2) Create the Release and attach all artifacts
  publish:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: List files (debug)
        run: ls -alR dist

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          generate_release_notes: true
          files: |
            dist/*.exe
            dist/*.exe.blockmap
            dist/*.dmg
            dist/*.dmg.blockmap
            dist/*.AppImage
            dist/*.deb
            dist/latest*.yml
